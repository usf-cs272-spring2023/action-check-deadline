name: 'Check Deadline'

on:
  workflow_dispatch:
    inputs:
      assignment_name:
        description: 'Assignment name'
        required: true
        type: 'string'
      starting_points:
        description: 'Earned points before late penalties'
        default: 100
        required: true
        type: 'number'
      submitted_date:
        description: 'Date submitted (ISO format)'
        required: false
        type: 'string'
      extension_hours:
        description: 'Amount of extension granted (in hours)'
        default: 0
        required: false
        type: 'number'

jobs:
  grade:
    runs-on: ubuntu-latest
    name: Check Deadline
    outputs:
      assignment_name: "${{ steps.check-deadline.outputs.assignment_name }}"
      submitted_iso: "${{ steps.check-deadline.outputs.submitted_iso }}"
      submitted_text: "${{ steps.check-deadline.outputs.submitted_text }}"
      deadline_iso: "${{ steps.check-deadline.outputs.deadline_iso }}"
      deadline_text: "${{ steps.check-deadline.outputs.deadline_text }}"
      late_interval: "${{ steps.check-deadline.outputs.late_interval }}"
      late_multiplier: "${{ steps.check-deadline.outputs.late_multiplier }}"
      late_percent: "${{ steps.check-deadline.outputs.late_percent }}"
      late_points: "${{ steps.check-deadline.outputs.late_points }}"
      grade_starting: "${{ steps.check-deadline.outputs.grade_starting }}"
      grade_possible: "${{ steps.check-deadline.outputs.grade_possible }}"
      grade_points: "${{ steps.check-deadline.outputs.grade_points }}"
      grade_percent: "${{ steps.check-deadline.outputs.grade_percent }}"
      results_name: "${{ steps.check-deadline.outputs.results_name }}"
      results_json: "${{ steps.check-deadline.outputs.results_json }}"

    steps:
      - name: Check Deadline
        id: check-deadline
        uses: usf-cs272-spring2023/action-check-deadline@main
        with:
          assignment_name: "${{ inputs.assignment_name }}"
          submitted_date:  "${{ inputs.submitted_date  }}"
          starting_points: "${{ inputs.starting_points }}"
          extension_hours: "${{ inputs.extension_hours }}"

  result:
    runs-on: ubuntu-latest
    name: Output Results
    needs: grade
    env:
      RESULTS_NAME: "${{ needs.grade.outputs.results_name }}"
      RESULTS_JSON: "${{ needs.grade.outputs.results_json }}"
    steps:
      - name: Download Results
        id: download-results
        uses: actions/download-artifact@v3
        with:
          name: '${{ env.RESULTS_NAME }}'

      - name: Display Results
        id: display-results
        uses: actions/github-script@v6
        with:
          script: |
            const output = require(`./${process.env.RESULTS_JSON}`);
            console.log(JSON.stringify(output));
            console.log('');

            core.startGroup('Setting output...');
            for (const property in output) {
              console.log(property, output[property]);
              core.setOutput(property, output[property]);
            }
            core.endGroup();
            console.log('');

            if (parseFloat(output.late_multiplier) < 1) {
              core.notice(`${output.assignment_name}: ${output.grade_points} / ${output.grade_possible} Points (${output.grade_percent}%)`);
            }
            else {
              core.warning(`${output.assignment_name}: ${output.grade_points} / ${output.grade_possible} Points (${output.grade_percent}%, Late Penalty: -${output.late_points} Points)`);
            }

            return output;
